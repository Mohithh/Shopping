"use client"
import { useEffect, useState } from 'react';


import { useParams } from 'next/navigation';

import { useContext } from "react";
import { FirstContext } from "@/app/layout";



export default  function Page() {

   const {cart,addtocart ,removeFromCart,clearcart, subtotal} = useContext(FirstContext); // Access values from the context
  
  const params = useParams();
  const decodedSlug = decodeURIComponent(params.slug); 


  const [pin, setpin] = useState()


  const [avapincode, setavapincode] = useState(true)
  const [notavpincode, setnotavpincode] = useState(true)

  const pincodebtn = async()=>{

   
    

    const fpin = await fetch("http://localhost:3000/api/pincode")
    const jsonpin = await fpin.json();

    if(jsonpin.includes(Number(pin))){
     

        setavapincode(false)
        setnotavpincode(true)
    }
    else{
         
        setavapincode(true)
        setnotavpincode(false)
    }
  }

  const onchange = (e)=>{
    setpin(e.target.value)
  }




  const [product, setproduct] = useState();
  const [color, setcolor] = useState('');
  const [size, setsize] = useState('');
  const [variants, setvariants] = useState({});

  const [allproduct, setallproduct] = useState({})


const [newslug, setnewslug] = useState({})

const [finalproduct, setfinalproduct] = useState({})
  
  useEffect(() => {
    const alldata = async () => {
      const fetchdata = await fetch("http://localhost:3000/api/getproducts");
      const allproduct = await fetchdata.json();
  
      const product = allproduct.success.find((item) => item.slug === decodedSlug);
      const variantList = allproduct.success.filter((item) => item.title === product.title);

      setfinalproduct(product)

      
      setallproduct(variantList)
      // console.log("varientproduct", variantList)
  
      const variantObject = {};
      for (let item of variantList) {
        if (Object.keys(variantObject).includes(item.color)) {
          variantObject[item.color][item.size] = { slug: item.slug };
        } else {
          variantObject[item.color] = {};
          variantObject[item.color][item.size] = { slug: item.slug };
        } 
      }
  
      setproduct(product);
      setvariants(variantObject);
    };
    alldata();
  }, [decodedSlug]);
  
  const onColorChange = async(e) => {
    setcolor(e.target.value);  // Set color when user selects it
    console.log("onchange1")
   await refreshVariant(size,e.target.value)

  };
  
  const onSizeChange =async (e) => {
    setsize(e.target.value); // Set size when user selects it
    // await refreshVariant(e.target.value,color)


  };
  
const refreshVariant = async(newSize, newColor) => {
  // Fetch the slug for the selected size and color combination
  const newSlug = await variants[newColor]?.[newSize]?.slug;
  
  if(newslug){
    const updatedProduct = allproduct.find((item) => item.slug === newSlug);
    console.log("Updated Product:", updatedProduct);

    setfinalproduct(updatedProduct);

  }
};
  return<>

<div>
    </div>



    
  <section className="text-gray-600 body-font overflow-hidden">
  <div className="container px-5 py-24 mx-auto">
    <div className="lg:w-4/5 mx-auto flex flex-wrap">
    <img className='lg:w-1/3  h-[35vh] md:h-[auto] m-auto' src={finalproduct.image} alt="" />
    
    {/* <img className='lg:w-1/3  h-[35vh] md:h-[auto] m-auto' src="https://m.media-amazon.com/images/I/613P0qrTDcL._AC_UL480_FMwebp_QL65_.jpg" alt="" /> */}
    
      {/* <img alt="ecommerce" className="lg:w-1/2 w-full lg:h-[50vh] h-64 object-cover object-center rounded" src="https://m.media-amazon.com/images/I/31NfkV9hKXL.jpg"/> */}
      <div className="lg:w-1/2 w-full lg:pl-10 lg:py-6 mt-6 lg:mt-0">
        <h2 className="text-sm title-font text-gray-500 tracking-widest">Codeshware</h2>
        <h1 className="text-gray-900 text-3xl title-font font-medium mb-1">The Catcher in the Rye</h1>
        <div className="flex mb-4">
          <span className="flex items-center">
            <svg fill="currentColor" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-4 h-4 text-pink-500" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
            </svg>
            <svg fill="currentColor" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-4 h-4 text-pink-500" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
            </svg>
            <svg fill="currentColor" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-4 h-4 text-pink-500" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
            </svg>
            <svg fill="currentColor" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-4 h-4 text-pink-500" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
            </svg>
            <svg fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-4 h-4 text-pink-500" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
            </svg>
            <span className="text-gray-600 ml-3">4 Reviews</span>
          </span>
          <span className="flex ml-3 pl-3 py-2 border-l-2 border-gray-200 space-x-2s">
            <a className="text-gray-500">
              <svg fill="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-5 h-5" viewBox="0 0 24 24">
                <path d="M18 2h-3a5 5 0 00-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 011-1h3z"></path>
              </svg>
            </a>
            <a className="text-gray-500">
              <svg fill="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-5 h-5" viewBox="0 0 24 24">
                <path d="M23 3a10.9 10.9 0 01-3.14 1.53 4.48 4.48 0 00-7.86 3v1A10.66 10.66 0 013 4s-4 9 5 13a11.64 11.64 0 01-7 2c9 5 20 0 20-11.5a4.5 4.5 0 00-.08-.83A7.72 7.72 0 0023 3z"></path>
              </svg>
            </a>
            <a className="text-gray-500">
              <svg fill="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-5 h-5" viewBox="0 0 24 24">
                <path d="M21 11.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7 8.38 8.38 0 01-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 01-.9-3.8 8.5 8.5 0 014.7-7.6 8.38 8.38 0 013.8-.9h.5a8.48 8.48 0 018 8v.5z"></path>
              </svg>
            </a>
          </span>
        </div>
        <p className="leading-relaxed">Fam locavore kickstarter distillery. Mixtape chillwave tumeric sriracha taximy chia microdosing tilde DIY. XOXO fam indxgo juiceramps cornhole raw denim forage brooklyn. Everyday carry +1 seitan poutine tumeric. Gastropub blue bottle austin listicle pour-over, neutra jean shorts keytar banjo tattooed umami cardigan.</p>
        <div className="flex mt-6 items-center pb-5 border-b-2 border-gray-100 mb-5">
          <div className="flex">

        

            <span className="mr-3" onClick={onColorChange} >Color</span>
            { variants && Object.keys(variants).map((colorKey) => {
            return Object.keys(variants[colorKey]).includes(size) &&<button value={colorKey}
          onClick={onColorChange} key={colorKey} style={{backgroundColor:colorKey}}  className="border-2 border-gray-300 rounded-full w-6 h-6 focus:outline-none"></button>})}
          </div>
          <div className="flex ml-6 items-center">


      


            <span className="mr-3">Size</span>
            <div className="relative">


            <select
        className="rounded border appearance-none border-gray-300 py-2 focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-500 text-base pl-3 pr-10"
        value={size}
        onChange={onSizeChange}
      >
        <option value="">Select your size</option>
        {variants && Object.keys(variants).map((colorKey) => (
          Object.keys(variants[colorKey]).map((sizeOption) => (
            <option key={`${colorKey}-${sizeOption}`} value={sizeOption}>
              {sizeOption}
            </option>
          ))
        ))}
      </select>

              <span className="absolute right-0 top-0 h-full w-10 text-center text-gray-600 pointer-events-none flex items-center justify-center">
                <svg fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-4 h-4" viewBox="0 0 24 24">
                  <path d="M6 9l6 6 6-6"></path>
                </svg>
              </span>
            </div>
          </div>
        </div>
        <div className="">


          <span className="title-font font-medium md:text-2xl text-gray-900">â‚¹499/-</span>

          <div className='flex flex-row mx-1 mt-5 items-center'>

         
          <button  className="flex  mx-1 px-3 py-2 items-center text-white bg-pink-500 border-0  focus:outline-none hover:bg-pink-600 rounded">Buy Now</button>
          {/* <button onClick={addToCart} className="flex  mx-1 px-2 py-2 text-white bg-pink-500 border-0  focus:outline-none hover:bg-pink-600 rounded">Add to cart</button> */}
          <button onClick={()=>{addtocart("slug",1,499,"FaTshirt","Xl","blue")}} className="flex mx-1 px-2 py-2 text-white bg-pink-500 border-0 focus:outline-none hover:bg-pink-600 rounded">
  Add to cart 
</button>
         

          
          <button className="rounded-full w-10 h-10 bg-gray-200 p-0 border-0 inline-flex items-center justify-center text-gray-500 ml-4">
           
           
            <svg fill="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" className="w-5 h-5" viewBox="0 0 24 24">
              <path d="M20.84 4.61a5.5 5.5 0 00-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 00-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 000-7.78z"></path>
            </svg>
          </button>

          </div>


        </div>

        <div className='pinsection mt-7 flex'>

            <input onChange={onchange} className=' md:w-auto w-[23vh] border border-gray-500 p-1 rounded'type="text" placeholder='Check Pincode' />
            <button onClick={pincodebtn} className='mx-2 text-white bg-pink-500 border-0 py-1 px-4 focus:outline-none hover:bg-pink-600 rounded'>Check</button>
            


        </div>

        <div className='mt-2'>
        <p className='text-green-700' hidden={avapincode}>Great news! We can deliver to this pincode.</p>
        <p className='text-red-700' hidden={notavpincode}>Unfortunately, we are unable to deliver to this pincode.</p>

        </div>
      </div>
    </div>
  </div>
</section>

 







</>
}


